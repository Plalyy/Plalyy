# 计算机网络

## 五层协议

物理层、数据链路层、网络层、运输层、应用层

## HTTP和HTTPS

- HTTP无状态：指的是多次请求是独立的，服务端并不知道客户端的状态
- HTTPS基于HTTP，利用SSL、TLS协议，进行加密（证书）

## 常见HTTP状态码

- 1xx：指定客户端相应的动作
  - 100 continue：继续，客户端询问后续发送附件
- 2x：用于请求成功
  - 200 OK
  - 202 Accepted
- 3xx：已经移动的文件并且常被包含在定位头信息中指定新的地址信息
  - 300 Multiple Choices/多重选择，表示被请求的文档可以在多个地方找到，并将在返回的文档中列出来。如果服务器有首选设置，首选项将会被列于定位响应头信息中
  - 301 Moved Permanently，请求的文档在别的地方;文档新的URL会在定位响应头信息中给出。浏览器会自动连接到新的URL
  - 302 Found 与301类似，只是定位头信息中所给的URL应被理解为临时交换地址而不是永久的
  - 307 Temporary Redirect/临时重定向
- 4xx：客户端错误
  - 400 Bad Request/错误请求，客户端请求语法错误
  - 401 Unauthorized/未授权，授权信息头无身份信息
  - 403 Forbidden/禁止，服务器拒绝提供请求资源
  - 404 Not Found/未找到，客户端所给的地址无法找到任何资源
  - 405 Method Not Allowed/方法为允许，请求方法对某些资源不可使用
  - 408 Request Timeout 请求超时
- 5xx：服务器错误
  - 500 Internal Server Error/内部服务器错误
  - 501 Not Implemented/未实现，服务器不支持要求功能（PUT等）
  - 502 Bad Gateway/错误的网关

传输层常用的协议

TPC、UDP

正向代理和反向代理

- 正向代理（使用对象是客户端）：隐藏真实客户端，介于客户端和服务端，客户端把目标信息发给代理。
- 反向代理（使用对象是服务端）：隐藏真实服务端，作为目标服务器。Nginx就是性能很好的，可以用来做负载均衡

TCP的Keep Alive和HTTP的Keep Alive的区别

- TCP会定时发送数据为空的保温，确定保持。（TCP层 内核态）
- HTTP建立TCP连接后，每次连接只进行一次请求/响应效率低。设置keep alive保持长连接。（应用层 用户态）

IP、子网掩码、网关各是什么

- IP网际互连协议，Internet Protocol
- 内网中IP分为网络号和主机号，子网掩码决定了某个IP地址的网络号与主机号是什么。新设备加入网络，会主动广播MAC和IP
- 网关gateway，网关在传输层上以实现网络互连。路由器的LAN接口的IP地址就是你所在局域网中的网关。当你所在的局域网的计算机需要和其它局域网中的计算机，或者需要访问互联网的时候，你所在局域网的计算机会先把数据包传输到网关(路由器的LAN接口)，然后再由网关进行转发
。
TCP可靠性怎么保证？ 超时重传、序列号、checksum 

超时重传的timeout多大？你来设计会怎么实现？定时器如何设计？了解Linux内核中定时器的实现吗？ 

TCP接收端发现序列号不对会有什么操作？如何保证数据有序？

- 有序：TCP是传输层协议，保证提交到应用层的消息是有序的。通过字节编号，只有收到正确连续顺序才会提交。
- 无误：会有序列号，信息丢失会触发重传消息机制。

socket编程的流程（服务端、客户端）

- Socket相当于基于UDP、TCP抽象出来的抽象层，介于网络层和传输层，为一套API

TCP建立连接时，ACK丢失

- Server：第三次ACK丢失，Server段根据超时重传机制，等待3、6、12秒重新发送SYN+ACK包。如果仍未收到，则Server自动关闭连接。
- Client：第二次接收SYN+ACK后即established已连接，若接收到RST包（服务端接收多次ACK或），则感知到服务端错误，关闭连接。

accept是在三次握手的哪一步，为什么

session和cookie区别，解决了协议的什么问题？

linux中如何设置tcp用滑动窗口协议还是选择重传协议（不会）

URL到页面加载过程，经历了什么协议过程

- 浏览器中输入URL
- 浏览器查找URL的DNS缓存记录
  - 浏览器缓存、操作系统缓存、路由器缓存、ISP缓存
- DNS解析URL对应IP
  - DNS本地hosts、本地DNS解析器缓存、本地DNS服务器。
  - 迭代查询：根域服务器、顶级域，cn 第二层域，hb.cn 子域
- 根据IP建立TCP连接
- HTTP发起请求
- 服务器处理请求，浏览器接收HTTP相应
- 渲染页面，构建DOM树
- 关闭TCP连接

## 路由转发过程介绍


## 底层网络协议

### ARP（地址解析协议）

透过目标设备的IP地址，查询目标设备的MAC地址，以保证通信。在每台安装有TCP/IP协议的电脑或路由器里都有一个ARP缓存表，表里的IP地址与MAC地址是一对应的。

当发送数据时，主机A会在自己的ARP缓存表中寻找是否有目标IP地址。如果找到就知道目标MAC地址（00-BB-00-62-C2-02），直接把目标MAC地址写入帧里面发送就可；如果在ARP缓存表中没有找到相对应的IP地址，主机A就会在网络上发送一个 广播（ARP request），目标MAC地址是“FF.FF.FF.FF.FF.FF”，这表示向同一网段内的所有主机发出这样的询问：“192.168.38.11的MAC地址是什么？”网络上其他主机并不响应ARP询问，只有主机B接收到这个帧时，才向主机A做出这样的回应（ARP response）：“192.168.38.11的MAC地址是（00-BB-00-62-C2-02）”。这样，主机A就知道主机B的MAC地址，它就可以向主机B发送信息。同时它还更新自己的ARP缓存表，下次再向主机B发送信息时，直接从ARP缓存表里查找就可。ARP缓存表采用老化机制，在一段时间内如果表中的某一行没有使用，就会被删除，这样可以大大减少ARP缓存表的长度，加快查询速度。
若不在同一局域网，则先找路由器MAC然后转发，这种情况称为ARP代理（ARP Proxy）。

### ICMP（互联网控制消息协议）

ping的实现，用于TCP/IP网络中发送控制消息，提供可能发生在通信环境中的各种问题反馈。与传输协议最大的不同：一般不用于在两点间传输数据，常用于返回的错误信息或是分析路由。

ICMP控制的内容包括但不仅限于：echo响应（ping）、目标网络不可达、目标端口不可达、禁止访问的网络、拥塞控制、重定向、TTL超时…

WebSocket
- 本质是基于TCP的协议，实现浏览器与服务器全双工通信，持久化协议
- 基于http建立TCP信道，后续不再使用http
- websocket连接后服务端和客户端双向发送数据，有状态，http是客户端发起请求后，服务器返回数据。
DNS
- 域名系统，应用层协议，主机名和域名转换为IP地址
- DNS服务器一般分三种，根DNS服务器，顶级DNS服务器，权威DNS服务器。
- 从客户端到本地DNS服务器是属于递归查询，而DNS服务器之间就是的交互查询就是迭代查询。



【todo】TCP和UDP

UDP也可以可靠连接了（quic）

【todo】TCP三次握手四次挥手

【todo】TCP可靠性和拥塞控制

服务重启怎么办

close_wait和time_wait是什么？为什么要time_wait？

如果在TIMEWAIT期间收到了数据包，会出现什么情况？

time_wait 主动关闭连接时形成，约4min，防止最后一个ACK丢失。时间很长，server端尽量减少主动关闭链接

close_wait 被动关闭链接情况，收到FIN但没发送FIN。如果不执行close就不能从CLOSE_WAIT迁移到LAST_ACK
GET和POST

- GET产生一个数据包，浏览器会把http header和data一并发送出去，服务器响应200（返回数据），参数暴露在URL上，更不安全
- POST产生两个数据包，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。

【todo】HTTP报文结构

【todo】HTTPS握手过程

https证书怎么避免中间人攻击

对称加密和非对称加密

- 对称加密中加密和解密使用的秘钥是同一个
- 非对称加密中采用两个密钥，一般使用公钥进行加密，私钥进行解密
- 对称加密解密的速度比较快，非对称加密和解密花费的时间长、速度相对较慢
- 对称加密的安全性相对较低，非对称加密的安全性较高。